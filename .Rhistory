setwd("/Volumes/Temporary/Github/dplyr package")
library(nycflights13)
nycflights13::flights
glimpse(flights)
library(dplyr)
glimpse(flights)
# An example below:
flights |>
filter(dest == "IAH") |>
group_by(year, month, day) |>
summarize(
arr_delay = mean(arr_delay, na.rm = TRUE)
)
flights |>
filter(arr_time > 1200) |>
filter(dep_time < 700) |>
select(carrier,origin,tailnum)
flights |>
filter(year = 2013 and month = 1) |>
flights |>
filter(carrier = AA) |>
select(arr_delay,dep_delay,flight)
flights |>
filter(year == 2013 and month == 1) |>
flights |>
filter(year == '2013' and month == '1') |>
flights |>
filter(carrier == 'AA')
flights |>
filter(carrier == 'AA') |>
select(day,flight)
flights |>
filter(carrier == 'AA') |>
select(day,flight,arr_delay)
flights |>
filter(carrier == 'AA') |>
select(day,flight,arr_delay,dep_delay)
flights |>
filter(carrier == 'AA') |>
select(day,flight,arr_delay,dep_delay)|>
group_by(arr_delay,dep_delay)
flights |>
filter(carrier == 'AA') |>
select(day,flight,arr_delay)|>
arrange(arr_delay)
library(nycflights13)
nycflights13::flights
library(dplyr)
glimpse(flights)
flights |>
filter(dep_delay > 120)
flights |>
head(filter(dep_delay > 120))
flights |>
filter(dep_delay > 120))
flights |>
filter(dep_delay > 120)
flights |>
filter (month == 1 & day == 1)
flights |>
filter (year == 2013 & month == 2)
# Use of arrange()
flights |>
arrange(year,month,day,dep_time)
setwd("/Volumes/Temporary/Github/dplyr package")
setwd("/Volumes/Temporary/Github/dplyr package")
setwd("/Volumes/Temporary/Github/dplyr package")
library(nycflights13)
nycflights13::flights
# Here, :: to indicate which data to extract from large datasets of nycflights13
# flights is a tibble, a special type of data frame used by the tidyverse to avoid some common gotchas.
# The most important difference between tibbles and data frames is the way tibbles print
# they are designed for large datasets, so they only show the first few rows and only the columns that fit on one screen.
library(dplyr)
glimpse(flights)
# <int> is short for integer
# <dbl> is short for double (aka real numbers)
# <chr> for character (aka strings)
# <dttm> for date-time
# dplyr basics: 3 things in common
# The first argument is always a data frame.
# The subsequent arguments typically describe which columns to operate on using the variable names (without quotes).
# The output is always a new data frame
# Use of filter() - using one condition
flights |>
filter(dep_delay > 120)
# Use of filter () - using two conditions
flights |>
filter (month == 1 & day == 1)
# another example
flights |>
filter (year == 2013 & month == 2)
# Use of arrange()
flights |>
arrange(year,month,day,dep_time)
# In the above arrange () function, we set four column conditions
# If you provide more than one column name, each additional column will be used to break ties in the values of the preceding columns.
# For example, the following code sorts by the departure time, which is spread over four columns.
# We get the earliest years first, then within a year, the earliest months, etc.
flights |>
arrange(desc(dep_delay))
flights |>
distinct()
flights |>
distinct(origin,dest)
setwd("/Volumes/Temporary/Github/dplyr package")
library(nycflights13)
nycflights13::flights
library(dplyr)
glimpse(flights)
flights |>
filter(dep_delay > 120)
flights |>
filter (month == 1 & day == 1)
# another example
flights |>
filter (year == 2013 & month == 2)
# Use of arrange()
flights |>
arrange(year,month,day,dep_time)
flights |>
arrange(desc(dep_delay))
flights |>
distinct()
flights |>
distinct(origin,dest)
setwd("/Volumes/Temporary/Github/dplyr package/dplyr-package")
setwd("/Volumes/Temporary/Github/dplyr package/dplyr-package")
